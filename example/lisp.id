import stdlib.id;

func ( lisp program ) {
    if ({ type of program } == "list") {
        let evaled = [];
        for atom in program {
            let evaled = evaled + { lisp atom };
        };
        let program = evaled;

        match (program :: 0) {
            "+" = {
                let result = program :: 1;
                for i in { list.slice program { range 2 { len program } 1 } } {
                    let result = result + i;
                };
                (result)
            },
            "-" = {
                let result = program :: 1;
                for i in { list.slice program { range 2 { len program } 1 } } {
                    let result = result - i;
                };
                (result)
            },
            "*" = {
                let result = program :: 1;
                for i in { list.slice program { range 2 { len program } 1 } } {
                    let result = result * i;
                };
                (result)
            },
            "/" = {
                let result = program :: 1;
                for i in { list.slice program { range 2 { len program } 1 } } {
                    let result = result / i;
                };
                (result)
            },
            "^" = {
                let result = program :: 1;
                for i in { list.slice program { range 2 { len program } 1 } } {
                    let result = result ^ i;
                };
                (result)
            },
            "concat" = {
                text.concat { list.slice program { range 1 { len program } 1 } }
            },
            _ = { fault }
        }
    } else program
};

func ( parse source ) {
    if ((source :: 0 == "(") & (source :: ({ len source } - 1) == ")")) {
        let tokens = { tokenize { text.slice source { range 1 ({ len source } - 1) 1 } } };
        let result = [];
        for i in tokens {
            let result = result + { parse i };
        };
        (result)
    } else {
        if { cast source to number } it else source
    }
};

func ( tokenize source ) {
    let tokens = [];
    let current = "";
    let nest = 0;

    for c in source {
        match c {
            "(" = {
                let nest = nest + 1;
                let current = current + c;
            },
            ")" = {
                let nest = nest - 1;
                let current = current + c;
            },
            " " = {
                if (nest == 0) {
                    if (current != "") {
                        let tokens = tokens + current;
                        let current = "";
                    }
                } else {
                    let current = current + c;
                }
            },
            _ = {
                let current = current + c;
            }
        }
    };

    if ((nest == 0) & (current != "")) {
        let tokens = tokens + current;
    };

    (tokens)
};

puts "idol Lisp";
let flag = 1;
while (flag == 1) {
    let s-expr = { input "> " };
    if (s-expr == ":q") {
        let flag = 0;
    } else {
        if { lisp { parse s-expr } } {
            puts it
        } else {
            puts "Error! something is wrong"
        }
    }
}
