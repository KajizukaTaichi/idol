import stdlib.id;

func ( lisp program ) {
    let evaled = [];
    for atom in program {
        if ({ type of atom } == "list") {
            let evaled = evaled + { lisp atom };
        } else {
            let evaled = evaled + atom;
        }
    };
    let program = evaled;

    if (program :: 0 == "+") {
        let result = program :: 1;
        for i in { slice program { range 2 { len program } 1 } } {
            let result = result + i;
        };
        (result)
    } else {
        if (program :: 0 == "-") {
            let result = program :: 1;
            for i in { slice program { range 2 { len program } 1 } } {
                let result = result - i;
            };
            (result)
        } else {
            if (program :: 0 == "*") {
                let result = program :: 1;
                for i in { slice program { range 2 { len program } 1 } } {
                    let result = result * i ;
                };
                (result)
            } else {
                if (program :: 0 == "/") {
                    let result = program :: 1;
                    for i in { slice program { range 2 { len program } 1 } } {
                        let result = result / i ;
                    };
                    (result)
                } else {
                    fault
                }
            }
        }
    }
};

func ( parse source ) {
    if ((source :: 0 == "(") & (source :: ({ len source } - 1) == ")")) {
        let tokens = { tokenize { concat-text { slice source { range 1 ({ len source } - 1) 1 } } } };
        let result = [];
        for i in tokens {
            let result = result + { parse i };
        };
        (result)
    } else {
        if { cast source to number } it else source
    }
};

func ( tokenize source ) {
    let tokens = [];
    let current = "";
    let nest = 0;

    for c in source {
        if (c == "(") {
            let nest = nest + 1;
            let current = current + c;
        } else {
            if (c == ")") {
                let nest = nest - 1;
                let current = current + c;
            } else {
                if (c == " ") {
                    if (nest == 0) {
                        let tokens = tokens + current;
                        let current = "";
                    } else {
                        let current = current + c;
                    }
                } else {
                    let current = current + c;
                }
            }
        }
    };

    if ((nest == 0) & (current != "")) {
        let tokens = tokens + current;
    };

    (tokens)
};


let s-expr = "(+ 1 (* 2 3) 4)";
puts { lisp { parse s-expr } };
