func ( puts value ) {
    print { if ({ type of value } == "text") value else { cast value to symbol } };
    print new-line
};

func ( range start end step ) {
    let i = start;
    let result = [];
    while (start <= i < end) {
        let result = result + i;
        let i = i + step
    };
    (result)
};

func ( len target ) {
    let i = 0;
    for _ in target {
        let i = i + 1;
    };
    (i)
};

func ( list.slice specified "in" target ) {
    let result = [];
    for i in specified {
        let result = result + (target :: i);
    };
    (result)
};

func ( list.concat target1 target2 ) {
    let result = [];
    for i in target1 {
        let result = result + i;
    };
    for i in target2 {
        let result = result + i;
    };
    (result)
};

func ( list.set index "in" target "to" value  ) {
    let before = { list.slice target { range 0 index 1 } };
    let after = { list.slice target { range (index + 1) { len target } 1 } };
    list.concat (before + value) after
};

func ( list.reverse target) {
    let result = [];
    for i in target {
        let result = { list.concat [i] result };
    };
    (result)
};


func ( text.slice specified "in" target ) {
    let result = "";
    for i in specified {
        let result = result + (target :: i);
    };
    (result)
};

func ( text.concat target ) {
    let result = "";
    for i in target {
        let result = result + i;
    };
    (result)
};

func ( text.set index "in" target "to" value ) {
    let before = { text.slice target { range 0 index 1 } };
    let after = { text.slice target { range (index + 1) { len target } 1 } };
    text.concat [before, value, after]
};

func ( text.reverse target ) {
    let result = "";
    for i in target {
        let result = i + result;
    };
    (result)
};

func ( dict.get ident "from" target  ) {
    let result = null;
    for i in target {
        if (i :: 0 == ident) {
            let result = i :: 1;
        }
    };
    (null != result)
};
